// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .

function show_facebook_login_confirmation() {
  var checked = document.getElementById('facebook_association_check_box').checked
  if (checked) {
    window.location.replace("/auth/facebook");
  }
}

function show_google_plus_login_confirmation() {
  var checked = document.getElementById('google_association_check_box').checked
  if (checked) {
    window.location.replace("/auth/google_oauth2");
  }
}

function remove_fields(link) {
  //alert($(link).up(".fields"));
  $(link).previous("input[type=hidden]").value = "1";
  $(link).up(".fields").hide();
}

function add_fields(link, association, content) {
  var new_id = new Date().getTime();
  var regexp = new RegExp("new_" + association, "g")
  $(link).up().insert({
    before: content.replace(regexp, new_id)
  });
}

var recompenseCounter = 1;

function incrementRecompenseCounter(){    
  document.getElementById('recompenseCounter').value = ++recompenseCounter;
  if (recompenseCounter == <%= Idea::MAX_RECOMPENSES %>)
  {
      document.getElementById('recompenseCounter').style.visibility = "hidden";
  }
}

function decrementRecompenseCounter(){
	if (recompenseCounter > 1) {
		document.getElementById('recompenseCounter').value = --recompenseCounter;	
	}
	
  if (recompenseCounter < <%= Idea::MAX_RECOMPENSES %>)
  {
    document.getElementById('recompenseCounter').style.visibility = "visible";
  }
}

var minValue = 1;
var maxValue = 1000;
var recompensesMaxValue = 1000;
var defaultValue = 10;
var valueToUpdateMaxFactor = 0.99;
var updateMaxValueFactor = 1.01;
var valueToUpdateMax = maxValue*valueToUpdateMaxFactor;
var separator =  " ----------------------------------------------------------------------------------------------------------------------- ";

function setMaxValue(value){
  maxValue = parseInt(value);
  valueToUpdateMax = parseInt(maxValue*valueToUpdateMaxFactor);
  document.getElementById('amount_min').innerText = minValue + separator;
  document.getElementById('amount_mid').innerText = parseInt(maxValue/2) + separator;
  document.getElementById('amount_max').innerText = maxValue + " ++++";
}

function setRecompensesMaxValue(value){
  recompensesMaxValue = parseInt(value);
}

function setDefaultValue(value){
  defaultValue = parseInt(value);
}

var altruisticDocElement = "";

function setAltruisticDocElement(elementID){
  altruisticDocElement = elementID;
}

function updateFinancialValues(){
  value = document.getElementById('financial_value_input').value;
  if (value > 1) {
    updateFinancialValue(value);
  }
}

function recompenseFinancialValue(financialValue) {
  document.getElementById('financial_value_input').value = financialValue;
  updateFinancialValue(financialValue);
}

function setRecompenseId(recompenseId) {
  document.getElementById('recompense_id_radio').value = recompenseId;
}

function updateFinancialValue(financialValue){
  document.getElementById(altruisticDocElement).innerText = financialValue;
  if (financialValue > maxValue) setMaxValue(financialValue);
  setDefaultValue(financialValue);
  //setSlider();
  //refreshSliderBackgroudColor();
}

function setSlider(){
  $( "#slider-range-min" ).slider({
    range: "min",
    value: defaultValue,
    min: minValue,
    max: maxValue,
    slide: function( event, ui ) {
      $( "#financial_value_input" ).val( ui.value );
      refreshSliderBackgroudColor();
      document.getElementById(altruisticDocElement).innerText = ui.value;
      
      if (ui.value > valueToUpdateMax) {
        setMaxValue(maxValue*updateMaxValueFactor);
        setDefaultValue(maxValue);
        setSlider();
      }
    }
  });
  $( "#financial_value_input" ).val( $( "#slider-range-min" ).slider( "value" ) );
}

function hexFromRGB(r, g, b) {
  var hex = [
    r.toString( 16 ),
    g.toString( 16 ),
    b.toString( 16 )
  ];
  $.each( hex, function( nr, val ) {
    if ( val.length === 1 ) {
      hex[ nr ] = "0" + val;
    }
  });
  return hex.join( "" ).toUpperCase();
}

function refreshSliderBackgroudColor() {
  var sliderValue = $( "#slider-range-min" ).slider( "value" ),
    red = Math.max(0, parseInt(256 - (256/(recompensesMaxValue/sliderValue)))),
    green = 255,
    blue = Math.max(0, parseInt(110 - (145/(recompensesMaxValue/sliderValue)))),

    hex = hexFromRGB( red, green, blue );

  //document.getElementById('amount_min').innerText = red + separator;
  //document.getElementById('amount_mid').innerText = green + separator;
  //document.getElementById('amount_max').innerText = blue;
  $( "#slider-range-min .ui-slider-range" ).css('background', "#" + hex);


  $( "#amount" ).val( hex ); 
}

$(function () {
  //setSlider();
});