// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .

function show_facebook_login_confirmation() {
  var checked = document.getElementById('facebook_association_check_box').checked;
  if (checked) {
    window.location.replace("/auth/facebook");
  }
}

function show_google_plus_login_confirmation() {
  var checked = document.getElementById('google_association_check_box').checked;
  if (checked) {
    window.location.replace("/auth/google_oauth2");
  }
}

function toggle_checkbox_and_element(checkbox, element_to_toggle) {
  var checked = document.getElementById(checkbox).checked;
  document.getElementById(element_to_toggle).disabled = !checked;
}

function open_tab() {
  var tab_address = document.getElementById('address').innerText;
  window.open(tab_address);
}

function remove_fields(link) {
  //alert($(link).up(".fields"));
  $(link).previous("input[type=hidden]").value = "1";
  $(link).up(".fields").hide();
}

function add_fields(link, association, content) {
  var new_id = new Date().getTime();
  var regexp = new RegExp("new_" + association, "g")
  $(link).up().insert({
    before: content.replace(regexp, new_id)
  });
}

var recompenseCounter = 1;

function incrementRecompenseCounter(){    
  document.getElementById('recompenseCounter').value = ++recompenseCounter;
  if (recompenseCounter == <%= Idea::MAX_RECOMPENSES %>)
  {
      document.getElementById('recompenseCounter').style.visibility = "hidden";
  }
}

function decrementRecompenseCounter(){
	if (recompenseCounter > 1) {
		document.getElementById('recompenseCounter').value = --recompenseCounter;	
	}
	
  if (recompenseCounter < <%= Idea::MAX_RECOMPENSES %>)
  {
    document.getElementById('recompenseCounter').style.visibility = "visible";
  }
}

function set_idea_status(idea_status) {
  document.getElementById('idea_status').value = idea_status;
}

function set_checkbox_classes(checkbox_id) {
  checkboxElem = document.getElementById(checkbox_id);
  if ( checkboxElem.className.match(/(?:^|\s)selected(?!\S)/) ) {
    checkboxElem.className = checkboxElem.className.replace( /(?:^|\s)selected(?!\S)/g , '' );
  } else {
    checkboxElem.className += " selected";
  }
  
}

function toggle_dropdown_visibility(){
  var vis = document.getElementById('fat-menu').style.visibility;
  if (vis == 'hidden') {
    document.getElementById('fat-menu').style.visibility = "visible";
  }
  else {
    document.getElementById('fat-menu').style.visibility = "hidden";
  }
}

function set_recompense_id(recompense_id) {
  alert(recompense_id);
  document.getElementById('recompense_id_radio').value = recompense_id;
}